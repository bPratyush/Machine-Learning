{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red70\green137\blue204;
\red193\green193\blue193;\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red202\green202\blue202;
\red194\green126\blue101;\red167\green197\blue152;\red89\green138\blue67;\red183\green111\blue179;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c33725\c61176\c83922;
\cssrgb\c80000\c80000\c80000;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c83137\c83137\c83137;
\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c41569\c60000\c33333;\cssrgb\c77255\c52549\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 class\strokec5  \strokec6 RLenv\strokec5 (\strokec6 data_cls\strokec5 ):\
    \strokec4 def\strokec5  \strokec7 __init__\strokec5 (\strokec8 self\strokec5 , \strokec8 train_test\strokec5 , \strokec9 **\strokec8 kwargs\strokec5 ):\
        \strokec6 data_cls\strokec5 .\strokec7 __init__\strokec5 (\strokec8 self\strokec5 , \strokec8 train_test\strokec5 , \strokec9 **\strokec8 kwargs\strokec5 )\
        \strokec6 data_cls\strokec5 .\strokec7 _load_df\strokec5 (\strokec8 self\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 data_shape\strokec5  \strokec9 =\strokec5  \strokec6 data_cls\strokec5 .\strokec7 get_shape\strokec5 (\strokec8 self\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 batch_size\strokec5  \strokec9 =\strokec5  \strokec8 kwargs\strokec5 .\strokec7 get\strokec5 (\strokec10 'batch_size'\strokec5 , \strokec11 1\strokec5 )  \strokec12 # experience replay -> batch = 1\strokec5 \
        \strokec8 self\strokec5 .\strokec8 iterations_episode\strokec5  \strokec9 =\strokec5  \strokec8 kwargs\strokec5 .\strokec7 get\strokec5 (\strokec10 'iterations_episode'\strokec5 , \strokec11 10\strokec5 )\
        \
        \strokec12 # Alert Generation Parameters\strokec5 \
        \strokec8 self\strokec5 .\strokec8 cluster_seed\strokec5  \strokec9 =\strokec5  \strokec8 kwargs\strokec5 .\strokec7 get\strokec5 (\strokec10 'cluster_seed'\strokec5 , \strokec11 42\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 n_alert\strokec5  \strokec9 =\strokec5  \strokec8 kwargs\strokec5 .\strokec7 get\strokec5 (\strokec10 'n_alert'\strokec5 , \strokec11 6\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5  \strokec9 =\strokec5  \{\}\
\
        \strokec13 if\strokec5  \strokec8 self\strokec5 .\strokec8 batch_size\strokec5  \strokec9 ==\strokec5  \strokec10 'full'\strokec5 :\
            \strokec8 self\strokec5 .\strokec8 batch_size\strokec5  \strokec9 =\strokec5  \strokec6 int\strokec5 (\strokec8 self\strokec5 .\strokec8 data_shape\strokec5 [\strokec11 0\strokec5 ] \strokec9 /\strokec5  \strokec8 self\strokec5 .\strokec8 iterations_episode\strokec5 )\
\
    \strokec4 def\strokec5  \strokec7 reset\strokec5 (\strokec8 self\strokec5 ):\
        \strokec12 # Statistics\strokec5 \
        \strokec8 self\strokec5 .\strokec8 def_true_labels\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_types\strokec5 ), \strokec8 dtype\strokec9 =\strokec6 int\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 def_estimated_labels\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_types\strokec5 ), \strokec8 dtype\strokec9 =\strokec6 int\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 att_true_labels\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 ), \strokec8 dtype\strokec9 =\strokec6 int\strokec5 )\
\
        \strokec8 self\strokec5 .\strokec8 state_numb\strokec5  \strokec9 =\strokec5  \strokec11 0\strokec5 \
\
        \strokec6 data_cls\strokec5 .\strokec7 _load_df\strokec5 (\strokec8 self\strokec5 )  \strokec12 # Reload and random index\strokec5 \
        \strokec8 self\strokec5 .\strokec8 states\strokec5 , \strokec8 self\strokec5 .\strokec8 labels\strokec5  \strokec9 =\strokec5  \strokec6 data_cls\strokec5 .\strokec7 get_batch\strokec5 (\strokec8 self\strokec5 , \strokec8 self\strokec5 .\strokec8 batch_size\strokec5 )\
\
        \strokec12 # Train GMM model for each attack type\strokec5 \
        \strokec13 for\strokec5  \strokec8 attack_type\strokec5  \strokec13 in\strokec5  \strokec8 self\strokec5 .\strokec8 attack_types\strokec5 :\
            \strokec8 X_pos\strokec5  \strokec9 =\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 [\strokec8 self\strokec5 .\strokec8 labels\strokec5 [\strokec8 attack_type\strokec5 ] \strokec9 ==\strokec5  \strokec11 1\strokec5 ]\
            \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5 [\strokec8 attack_type\strokec5 ] \strokec9 =\strokec5  \strokec6 GaussianMixture\strokec5 (\strokec8 n_components\strokec9 =\strokec8 self\strokec5 .\strokec8 n_alert\strokec5 , \strokec8 random_state\strokec9 =\strokec8 self\strokec5 .\strokec8 cluster_seed\strokec5 ).\strokec7 fit\strokec5 (\strokec8 X_pos\strokec5 )\
        \
        \strokec13 return\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 .\strokec8 values\strokec5 \
\
    \strokec4 def\strokec5  \strokec7 act\strokec5 (\strokec8 self\strokec5 , \strokec8 defender_actions\strokec5 , \strokec8 attack_actions\strokec5 ):\
        \strokec12 # Clear previous rewards\strokec5 \
        \strokec8 self\strokec5 .\strokec8 att_reward\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 attack_actions\strokec5 ))\
        \strokec8 self\strokec5 .\strokec8 def_reward\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 defender_actions\strokec5 ))\
\
        \strokec8 attack\strokec5  \strokec9 =\strokec5  [\strokec8 self\strokec5 .\strokec8 attack_types\strokec5 .\strokec7 index\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_map\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 [\strokec8 att\strokec5 ]]) \strokec13 for\strokec5  \strokec8 att\strokec5  \strokec13 in\strokec5  \strokec8 attack_actions\strokec5 ]\
\
        \strokec12 # Set different reward values\strokec5 \
        \strokec13 if\strokec5  \strokec8 attack\strokec5 [\strokec11 0\strokec5 ] \strokec4 in\strokec5  [\strokec11 3\strokec5 , \strokec11 4\strokec5 ]:\
            \strokec8 self\strokec5 .\strokec8 def_reward\strokec5  \strokec9 =\strokec5  (\strokec6 np\strokec5 .asarray(\strokec8 defender_actions\strokec5 ) \strokec9 ==\strokec5  \strokec6 np\strokec5 .asarray(\strokec8 attack\strokec5 )) \strokec9 *\strokec5  \strokec11 2\strokec5 \
            \strokec8 self\strokec5 .\strokec8 att_reward\strokec5  \strokec9 =\strokec5  (\strokec6 np\strokec5 .asarray(\strokec8 defender_actions\strokec5 ) \strokec9 !=\strokec5  \strokec6 np\strokec5 .asarray(\strokec8 attack\strokec5 )) \strokec9 *\strokec5  \strokec11 2\strokec5 \
        \strokec13 else\strokec5 :\
            \strokec8 self\strokec5 .\strokec8 def_reward\strokec5  \strokec9 =\strokec5  (\strokec6 np\strokec5 .asarray(\strokec8 defender_actions\strokec5 ) \strokec9 ==\strokec5  \strokec6 np\strokec5 .asarray(\strokec8 attack\strokec5 )) \strokec9 *\strokec5  \strokec11 1\strokec5 \
            \strokec8 self\strokec5 .\strokec8 att_reward\strokec5  \strokec9 =\strokec5  (\strokec6 np\strokec5 .asarray(\strokec8 defender_actions\strokec5 ) \strokec9 !=\strokec5  \strokec6 np\strokec5 .asarray(\strokec8 attack\strokec5 )) \strokec9 *\strokec5  \strokec11 1\strokec5 \
\
        \strokec8 self\strokec5 .\strokec8 def_estimated_labels\strokec5  \strokec9 +=\strokec5  \strokec6 np\strokec5 .bincount(\strokec8 defender_actions\strokec5 , \strokec8 minlength\strokec9 =\strokec7 len\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_types\strokec5 ))\
\
        \strokec12 # Print alert labels for each attack type\strokec5 \
        \strokec13 if\strokec5  \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5  \strokec4 is\strokec5  \strokec4 not\strokec5  \strokec4 None\strokec5 :\
            \strokec13 for\strokec5  \strokec8 attack_type\strokec5  \strokec13 in\strokec5  \strokec8 self\strokec5 .\strokec8 attack_types\strokec5 :\
                \strokec8 X_pos\strokec5  \strokec9 =\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 [\strokec8 self\strokec5 .\strokec8 labels\strokec5 [\strokec8 attack_type\strokec5 ] \strokec9 ==\strokec5  \strokec11 1\strokec5 ]\
                \strokec8 y_pos\strokec5  \strokec9 =\strokec5  \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5 [\strokec8 attack_type\strokec5 ].predict(\strokec8 X_pos\strokec5 ) \strokec9 +\strokec5  \strokec11 1\strokec5 \
                \strokec7 print\strokec5 (\strokec10 "Alert labels of \strokec4 \{\}\strokec10  attacks: \strokec4 \{\}\strokec10 "\strokec5 .\strokec7 format\strokec5 (\strokec8 attack_type\strokec5 , \strokec6 collections\strokec5 .\strokec6 Counter\strokec5 (\strokec8 y_pos\strokec5 )))\
\
        \strokec13 for\strokec5  \strokec8 act\strokec5  \strokec13 in\strokec5  \strokec8 attack_actions\strokec5 :\
            \strokec8 self\strokec5 .\strokec8 def_true_labels\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_types\strokec5 .\strokec7 index\strokec5 (\strokec8 self\strokec5 .\strokec8 attack_map\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 [\strokec8 act\strokec5 ]])] \strokec9 +=\strokec5  \strokec11 1\strokec5 \
\
        \strokec12 # Get new state and new true values\strokec5 \
        \strokec8 attack_actions\strokec5  \strokec9 =\strokec5  \strokec8 attacker_agent\strokec5 .\strokec7 act\strokec5 (\strokec8 self\strokec5 .\strokec8 states\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 states\strokec5  \strokec9 =\strokec5  \strokec8 env\strokec5 .\strokec7 get_states\strokec5 (\strokec8 attack_actions\strokec5 )\
\
        \strokec12 # Done always False in this continuous task\strokec5 \
        \strokec8 self\strokec5 .\strokec8 done\strokec5  \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 attack_actions\strokec5 ), \strokec8 dtype\strokec9 =\strokec6 bool\strokec5 )\
\
        \strokec13 return\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 , \strokec8 self\strokec5 .\strokec8 def_reward\strokec5 , \strokec8 self\strokec5 .\strokec8 att_reward\strokec5 , \strokec8 attack_actions\strokec5 , \strokec8 self\strokec5 .\strokec8 done\strokec5 \
\
    \strokec4 def\strokec5  \strokec7 get_states\strokec5 (\strokec8 self\strokec5 , \strokec8 attacker_actions\strokec5 ):\
        \strokec8 first\strokec5  \strokec9 =\strokec5  \strokec4 True\strokec5 \
        \strokec13 for\strokec5  \strokec8 attack\strokec5  \strokec13 in\strokec5  \strokec8 attacker_actions\strokec5 :\
            \strokec13 if\strokec5  \strokec8 first\strokec5 :\
                \strokec8 minibatch\strokec5  \strokec9 =\strokec5  (\strokec8 self\strokec5 .\strokec8 df\strokec5 [\strokec8 self\strokec5 .\strokec8 df\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 [\strokec8 attack\strokec5 ]] \strokec9 ==\strokec5  \strokec11 1\strokec5 ].\strokec7 sample\strokec5 (\strokec11 1\strokec5 ))\
                \strokec8 first\strokec5  \strokec9 =\strokec5  \strokec4 False\strokec5 \
            \strokec13 else\strokec5 :\
                \strokec8 minibatch\strokec5  \strokec9 =\strokec5  \strokec8 minibatch\strokec5 .append(\strokec8 self\strokec5 .\strokec8 df\strokec5 [\strokec8 self\strokec5 .\strokec8 df\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 [\strokec8 attack\strokec5 ]] \strokec9 ==\strokec5  \strokec11 1\strokec5 ].\strokec7 sample\strokec5 (\strokec11 1\strokec5 ))\
\
        \strokec8 self\strokec5 .\strokec8 labels\strokec5  \strokec9 =\strokec5  \strokec8 minibatch\strokec5 [\strokec8 self\strokec5 .\strokec8 attack_names\strokec5 ]\
        \strokec8 minibatch\strokec5 .\strokec7 drop\strokec5 (\strokec8 self\strokec5 .\strokec8 all_attack_names\strokec5 , \strokec8 axis\strokec9 =\strokec11 1\strokec5 , \strokec8 inplace\strokec9 =\strokec4 True\strokec5 )\
        \strokec8 self\strokec5 .\strokec8 states\strokec5  \strokec9 =\strokec5  \strokec8 minibatch\strokec5 \
\
        \strokec12 # Add alert information to the states for each attack type\strokec5 \
        \strokec13 if\strokec5  \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5  \strokec4 is\strokec5  \strokec4 not\strokec5  \strokec4 None\strokec5 :\
            \strokec13 for\strokec5  \strokec8 attack_type\strokec5  \strokec13 in\strokec5  \strokec8 self\strokec5 .\strokec8 attack_types\strokec5 :\
                \strokec8 X_pos\strokec5  \strokec9 =\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 [\strokec8 self\strokec5 .\strokec8 labels\strokec5 [\strokec8 attack_type\strokec5 ] \strokec9 ==\strokec5  \strokec11 1\strokec5 ]\
                \strokec8 y_pos\strokec5  \strokec9 =\strokec5  \strokec8 self\strokec5 .\strokec8 alert_clusters\strokec5 [\strokec8 attack_type\strokec5 ].predict(\strokec8 X_pos\strokec5 ) \strokec9 +\strokec5  \strokec11 1\strokec5 \
                \strokec8 self\strokec5 .\strokec8 states\strokec5 [\strokec8 attack_type\strokec5  \strokec9 +\strokec5  \strokec10 '_alert_labels'\strokec5 ] \strokec9 =\strokec5  \strokec6 np\strokec5 .zeros(\strokec7 len\strokec5 (\strokec8 self\strokec5 .\strokec8 states\strokec5 ))\
                \strokec13 for\strokec5  \strokec8 i\strokec5 , \strokec8 attack\strokec5  \strokec13 in\strokec5  \strokec6 enumerate\strokec5 (\strokec8 attacker_actions\strokec5 ):\
                    \strokec8 self\strokec5 .\strokec8 states\strokec5 .\strokec8 loc\strokec5 [\strokec8 self\strokec5 .\strokec8 states\strokec5 .\strokec8 index\strokec5 [\strokec8 i\strokec5 ], \strokec8 attack_type\strokec5  \strokec9 +\strokec5  \strokec10 '_alert_labels'\strokec5 ] \strokec9 =\strokec5  \strokec8 y_pos\strokec5 [\strokec8 i\strokec5 ]\
\
        \strokec13 return\strokec5  \strokec8 self\strokec5 .\strokec8 states\strokec5 \
\
}